name: Collect AI News

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:
    inputs:
      sources:
        description: 'Sources to collect (comma-separated or "all")'
        required: false
        default: 'all'
      force_refresh:
        description: 'Force refresh'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  collect:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: news-collection
      cancel-in-progress: false
    
    env:
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history for better git operations
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'src/backend/requirements.txt'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        pip install -r src/backend/requirements.txt
    
    - name: Collect news
      id: collect
      run: |
        python src/backend/collectors/collect_news.py \
          --sources "${{ github.event.inputs.sources || 'all' }}" \
          --output src/backend/data/news.json \
          --config src/shared/config/sources.json \
          --archive \
          ${{ github.event.inputs.force_refresh == 'true' && '--force-refresh' || '' }} \
          --verbose
    
    - name: Generate API files
      if: steps.collect.outcome == 'success'
      run: |
        python src/backend/api/generate_api.py
    
    - name: Verify generated files
      if: steps.collect.outcome == 'success'
      run: |
        echo "Checking generated files..."
        ls -la src/backend/data/
        ls -la src/backend/api/
        if [ -f "src/backend/data/news.json" ]; then
          echo "✅ News data file exists"
          echo "Articles count: $(jq '.count // 0' src/backend/data/news.json)"
        else
          echo "❌ News data file missing"
          exit 1
        fi
    
    - name: Commit changes
      id: commit
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are any changes
        git add src/backend/data/ src/backend/api/ src/frontend/
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, committing..."
          git commit -m "🤖 Update news data: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully committed and pushed changes"
        fi
    
    - name: Prepare deployment directory
      if: success()
      run: |
        echo "Preparing deployment directory..."
        mkdir -p deploy_temp
        
        # Copy frontend files
        echo "Copying frontend files..."
        cp -r src/frontend/* deploy_temp/
        
        # Remove the backend symlink to avoid conflicts
        rm -f deploy_temp/backend
        
        # Add .nojekyll file to ensure GitHub Pages doesn't process with Jekyll
        touch deploy_temp/.nojekyll
        
        # Copy only the necessary API files for the frontend
        echo "Copying API files..."
        mkdir -p deploy_temp/api
        cp src/backend/api/*.json deploy_temp/api/ 2>/dev/null || true
        
        # Verify deployment structure
        echo "Deployment directory structure:"
        find deploy_temp -type f | head -20
        
        # Verify index.html exists
        if [ -f "deploy_temp/index.html" ]; then
          echo "✅ index.html found in deployment directory"
        else
          echo "❌ index.html NOT found in deployment directory"
          exit 1
        fi

    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: deploy_temp
        enable_jekyll: false
        allow_empty_commit: true
        force_orphan: true
        # cname: newsxp-ai.yourdomain.com  # Uncomment and update with your actual domain
    
    - name: Workflow Summary
      if: always()
      run: |
        echo "## 📰 News Collection Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Sources:** ${{ github.event.inputs.sources || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Force Refresh:** ${{ github.event.inputs.force_refresh || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.collect.outcome }}" = "success" ]; then
          echo "✅ **Data Collection:** Success" >> $GITHUB_STEP_SUMMARY
          if [ -f "src/backend/data/news.json" ]; then
            ARTICLE_COUNT=$(jq '.count // 0' src/backend/data/news.json)
            echo "📊 **Articles Collected:** $ARTICLE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Data Collection:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.commit.outputs.has_changes }}" = "true" ]; then
          echo "✅ **Changes:** Committed and deployed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Changes:** No new data to commit" >> $GITHUB_STEP_SUMMARY
        fi