name: Collect AI News

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:
    inputs:
      sources:
        description: 'Sources to collect (comma-separated or "all")'
        required: false
        default: 'all'
      force_refresh:
        description: 'Force refresh'
        required: false
        type: boolean
        default: false
      debug:
        description: 'Enable debug mode (show detailed deployment structure)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  collect:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: news-collection
      cancel-in-progress: false
    
    env:
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
    
    outputs:
      has_changes: ${{ steps.commit.outputs.has_changes }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history for better git operations
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'src/backend/requirements.txt'
    
    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-cache-${{ runner.os }}-${{ hashFiles('**/collect-news.yml') }}
        restore-keys: |
          apt-cache-${{ runner.os }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq rsync
    
    - name: Install Python dependencies
      run: |
        pip install -r src/backend/requirements.txt
    
    - name: Collect news
      id: collect
      run: |
        python src/backend/collectors/collect_news.py \
          --sources "${{ github.event.inputs.sources || 'all' }}" \
          --output src/backend/data/news.json \
          --config src/shared/config/sources.json \
          --archive \
          ${{ github.event.inputs.force_refresh == 'true' && '--force-refresh' || '' }} \
          --verbose
    
    - name: Generate API files
      if: steps.collect.outcome == 'success'
      run: |
        python src/backend/api/generate_api.py
    
    - name: Verify generated files
      if: steps.collect.outcome == 'success'
      run: |
        echo "Checking generated files..."
        
        # Efficient verification with single commands
        if [ -f "src/backend/data/news.json" ]; then
          article_count=$(jq '.count // 0' src/backend/data/news.json)
          echo "✅ News data file exists ($article_count articles)"
        else
          echo "❌ News data file missing"
          exit 1
        fi
        
        # Quick check for API files
        api_files=$(find src/backend/api -name "*.json" | wc -l)
        echo "✅ API files generated: $api_files JSON files"
    
    - name: Commit changes
      id: commit
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are any changes
        git add src/backend/data/ src/backend/api/ src/frontend/
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, committing..."
          git commit -m "🤖 Update news data: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully committed and pushed changes"
        fi
    
    - name: Cache deployment structure
      uses: actions/cache@v4
      with:
        path: |
          src/frontend
          src/backend/api
        key: deployment-files-${{ hashFiles('src/frontend/**', 'src/backend/api/**', 'scripts/inject-analytics.sh') }}
        restore-keys: |
          deployment-files-

    - name: Prepare deployment directory
      if: success()
      run: |
        echo "Preparing deployment directory..."
        
        # Create deployment directory and copy files efficiently
        mkdir -p deploy_temp/api
        
        # Use rsync for efficient file copying with optimized options
        echo "Copying frontend files..."
        rsync -a --delete --exclude='*.md' --exclude='*.log' --exclude='README*' src/frontend/ deploy_temp/ || {
          echo "❌ Failed to copy frontend files"
          exit 1
        }
        
        echo "Copying API files..."
        rsync -a --delete src/backend/api/ deploy_temp/api/ || {
          echo "❌ Failed to copy API files" 
          exit 1
        }
        
        # Handle Google Analytics injection efficiently
        if [ -f "deploy_temp/index.html" ]; then
          if [ -n "${{ secrets.GOOGLE_ANALYTICS_ID }}" ]; then
            echo "Injecting Google Analytics..."
            if [ -x "scripts/inject-analytics.sh" ]; then
              ./scripts/inject-analytics.sh deploy_temp/index.html "${{ secrets.GOOGLE_ANALYTICS_ID }}"
            else
              echo "⚠️ Analytics injection script not executable, skipping..."
            fi
          else
            echo "Removing Google Analytics placeholder..."
            sed -i 's|__GOOGLE_ANALYTICS__||g' deploy_temp/index.html
          fi
          echo "✅ index.html processed successfully"
        else
          echo "❌ index.html NOT found in deployment directory"
          exit 1
        fi
        
        # Efficient file counting and verification
        file_count=$(find deploy_temp -type f | wc -l)
        api_count=$(find deploy_temp/api -name "*.json" 2>/dev/null | wc -l)
        
        echo "📊 Deployment Summary:"
        echo "  - Total files: $file_count"
        echo "  - API files: $api_count"
        echo "✅ Deployment directory prepared successfully"

    - name: Validate deployment (Debug on Failure)
      if: success()
      run: |
        # Quick validation - only show detailed info if there are issues
        if [ ! -f "deploy_temp/index.html" ]; then
          echo "❌ Critical: index.html missing!"
          echo "=== Deployment directory structure ==="
          find deploy_temp -type f | sort
          exit 1
        fi
        
        # Clean up any unwanted files
        find deploy_temp -name "README*.md" -delete 2>/dev/null || true
        
        # Quick summary for successful deployments
        file_count=$(find deploy_temp -type f | wc -l)
        echo "✅ Deployment validated: $file_count files ready"
        
        # Only show detailed structure if DEBUG is enabled via workflow dispatch
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          echo "=== Detailed deployment structure (debug mode) ==="
          find deploy_temp -type f | sort
          echo "=== Contents of index.html (first 10 lines) ==="
          head -10 deploy_temp/index.html
        fi

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: deploy_temp

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: collect
    if: success()
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Workflow Summary
      if: always()
      run: |
        echo "## 📰 News Collection Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Sources:** ${{ github.event.inputs.sources || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Force Refresh:** ${{ github.event.inputs.force_refresh || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Debug Mode:** ${{ github.event.inputs.debug || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.collect.outputs.has_changes }}" = "true" ]; then
          echo "✅ **Changes:** Committed and deployed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Changes:** No new data to commit" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Deployment:** Site deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "⚡ **Performance:** Used caching and rsync for efficient deployment" >> $GITHUB_STEP_SUMMARY
        echo "📄 **Note:** Make sure GitHub Pages is configured to use 'GitHub Actions' as the source" >> $GITHUB_STEP_SUMMARY