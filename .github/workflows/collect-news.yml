name: Collect AI News

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:
    inputs:
      sources:
        description: 'Sources to collect (comma-separated or "all")'
        required: false
        default: 'all'
      force_refresh:
        description: 'Force refresh'
        required: false
        type: boolean
        default: false
      debug:
        description: 'Enable debug mode (show detailed deployment structure)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: news-collection-setup
      cancel-in-progress: false
    
    env:
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
      
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history for better git operations
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'src/backend/requirements.txt'
    
    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-cache-${{ runner.os }}
        restore-keys: |
          apt-cache-${{ runner.os }}-

    # install with jq for JSON processing
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        pip install -r src/backend/requirements.txt
    
    - name: Cache Python environment
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('src/backend/requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-

  collect-news:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup
    concurrency:
      group: news-collection
      cancel-in-progress: false
    
    env:
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
      
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'src/backend/requirements.txt'
    
    - name: Restore system dependencies cache
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: apt-cache-${{ runner.os }}
        restore-keys: |
          apt-cache-${{ runner.os }}-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        pip install -r src/backend/requirements.txt
    
    - name: Collect news
      id: collect
      run: |
        python src/backend/collectors/collect_news.py \
          --sources "${{ github.event.inputs.sources || 'all' }}" \
          --output src/backend/data/news.json \
          --config src/shared/config/sources.json \
          --archive \
          ${{ github.event.inputs.force_refresh == 'true' && '--force-refresh' || '' }} \
          --verbose
    
    - name: Verify news collection
      run: |
        echo "Verifying news collection..."
        
        if [ -f "src/backend/data/news.json" ]; then
          article_count=$(jq '.count // 0' src/backend/data/news.json)
          echo "‚úÖ News data file exists ($article_count articles)"
        else
          echo "‚ùå News data file missing"
          exit 1
        fi
    
    - name: Upload news data artifact
      uses: actions/upload-artifact@v4
      with:
        name: news-data
        path: src/backend/data/news.json
        retention-days: 1

  generate-api:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: collect-news
    concurrency:
      group: api-generation
      cancel-in-progress: false
    
    env:
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
    
    outputs:
      has_changes: ${{ steps.commit.outputs.has_changes }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'src/backend/requirements.txt'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        pip install -r src/backend/requirements.txt
    
    - name: Download news data artifact
      uses: actions/download-artifact@v4
      with:
        name: news-data
        path: src/backend/data/
    
    - name: Generate API files
      run: |
        python src/backend/api/generate_api.py
    
    - name: Verify API generation
      run: |
        echo "Verifying API generation..."
        
        # Quick check for API files
        api_files=$(find src/backend/api -name "*.json" | wc -l)
        echo "‚úÖ API files generated: $api_files JSON files"
        
        # Verify news data still exists
        if [ -f "src/backend/data/news.json" ]; then
          article_count=$(jq '.count // 0' src/backend/data/news.json)
          echo "‚úÖ News data confirmed ($article_count articles)"
        else
          echo "‚ùå News data file missing after API generation"
          exit 1
        fi
    
    - name: Commit changes
      id: commit
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are any changes
        git add src/backend/data/ src/backend/api/ src/frontend/
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, committing..."
          git commit -m "ü§ñ Update news data: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Successfully committed and pushed changes"
        fi

  prepare-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: generate-api
    if: success()
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}  # Use the updated ref after commit
        
    - name: Prepare deployment directory
      run: |
        echo "Preparing deployment directory..."
        
        # Create deployment directory and copy files
        mkdir -p deploy_temp/api
        
        # Copy frontend files
        echo "Copying frontend files..."
        cp -r src/frontend/* deploy_temp/
        
        # Copy API files
        echo "Copying API files..."
        cp -r src/backend/api/* deploy_temp/api/
        
        # Handle Google Analytics injection
        if [ -f "deploy_temp/index.html" ]; then
          if [ -n "${{ secrets.GOOGLE_ANALYTICS_ID }}" ]; then
            echo "Injecting Google Analytics..."
            if [ -x "scripts/inject-analytics.sh" ]; then
              ./scripts/inject-analytics.sh deploy_temp/index.html "${{ secrets.GOOGLE_ANALYTICS_ID }}"
            else
              echo "Removing Google Analytics placeholder..."
              sed -i 's|__GOOGLE_ANALYTICS__||g' deploy_temp/index.html
            fi
          else
            echo "Removing Google Analytics placeholder..."
            sed -i 's|__GOOGLE_ANALYTICS__||g' deploy_temp/index.html
          fi
          echo "‚úÖ index.html processed successfully"
        else
          echo "‚ùå index.html NOT found in deployment directory"
          exit 1
        fi
        
        echo "‚úÖ Deployment directory prepared successfully"

    - name: Validate deployment
      run: |
        # Quick validation
        if [ ! -f "deploy_temp/index.html" ]; then
          echo "‚ùå Critical: index.html missing!"
          echo "=== Deployment directory structure ==="
          find deploy_temp -type f | sort
          exit 1
        fi
        
        file_count=$(find deploy_temp -type f | wc -l)
        echo "‚úÖ Deployment validated: $file_count files ready"
        
        # Only show detailed structure if DEBUG is enabled via workflow dispatch
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          echo "=== Detailed deployment structure (debug mode) ==="
          find deploy_temp -type f | sort
        fi

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: deploy_temp

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [generate-api, prepare-deployment]
    if: success()
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Workflow Summary
      if: always()
      run: |
        echo "## üì∞ News Collection Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Sources:** ${{ github.event.inputs.sources || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Force Refresh:** ${{ github.event.inputs.force_refresh || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Debug Mode:** ${{ github.event.inputs.debug || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.generate-api.outputs.has_changes }}" = "true" ]; then
          echo "‚úÖ **Changes:** Committed and deployed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ÑπÔ∏è **Changes:** No new data to commit" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üåê **Deployment:** Site deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "üìÑ **Note:** Make sure GitHub Pages is configured to use 'GitHub Actions' as the source" >> $GITHUB_STEP_SUMMARY